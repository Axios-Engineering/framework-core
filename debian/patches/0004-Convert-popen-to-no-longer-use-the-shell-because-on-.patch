From: Michael Ihde <michael.ihde@axiosengineering.com>
Date: Thu, 14 Mar 2013 00:38:57 +0000
Subject: Convert popen to no longer use the shell because on Ubuntu killing
 the pid will kill the shell process but not the children

---
 src/testing/helpers/scatest.py          |   29 ++++++++++++++---------------
 src/testing/tests/test_01_nodeBooter.py |   24 ++++++++++++------------
 2 files changed, 26 insertions(+), 27 deletions(-)

diff --git a/src/testing/helpers/scatest.py b/src/testing/helpers/scatest.py
index fff1f31..6989792 100644
--- a/src/testing/helpers/scatest.py
+++ b/src/testing/helpers/scatest.py
@@ -143,43 +143,42 @@ GDB_CMD_FILE=None
 def spawnNodeBooter(dmdFile=None, dcdFile=None, debug=0, domainname=None, loggingURI=None, endpoint=None, dbURI=None, execparams=""):
     args = []
     if dmdFile != None:
-        args.append("-D %s" % dmdFile)
+        args.extend(["-D", dmdFile])
     if dcdFile != None:
-        args.append("-d %s" % dcdFile)
+        args.extend(["-d", dcdFile])
     if domainname == None:
         # Always use the --domainname argument because
         # we don't want to have to read the DCD files or regnerate them
-        args.append("--domainname %s" % getTestDomainName())
+        args.extend(["--domainname", getTestDomainName()])
     else:
-        args.append("--domainname %s" % domainname)
+        args.extend(["--domainname", domainname])
 
     if endpoint == None:
-        args.append("--nopersist ")
+        args.append("--nopersist")
     else:
-        args.append("-ORBendPoint %s" % endpoint)
+        args.extend(["-ORBendPoint", endpoint])
 
     if dbURI:
-        args.append("-dburl %s" % dbURI)
+        args.extend(["-dburl", dbURI])
 
-    args.append("-debug %d" % debug)
+    args.extend(["-debug", str(debug)])
     if loggingURI is not None:
         if loggingURI:
-            args.append("-log4cxx %s" % loggingURI)
+            args.extend(["-log4cxx", loggingURI])
     else:
         logconfig = getLogConfig()
         if os.path.exists(logconfig):
-            args.append("-log4cxx %s" % logconfig)
+            args.extend(["-log4cxx", logconfig])
         else:
             print "Could not find Log Conf file <" + logconfig + '>'
             print "Not using a log configuration file"
-    argstr = " ".join(args)
-    argstr = '%s %s' % (argstr, execparams)
-    
+    args.extend(execparams.split(" "))
+    args.insert(0, "../../control/framework/nodeBooter")
 
     print '\n-------------------------------------------------------------------'
-    print 'Launching nodeBooter', argstr
+    print 'Launching nodeBooter', " ".join(args)
     print '-------------------------------------------------------------------'
-    nb = ossie.utils.Popen("../../control/framework/nodeBooter %s" % (argstr), cwd=getSdrPath(), shell=True)
+    nb = ossie.utils.Popen(args, cwd=getSdrPath(), shell=False, preexec_fn=os.setpgrp)
     if DEBUG_NODEBOOTER:
         absNodeBooterPath = os.path.abspath("../control/framework/nodeBooter")
         if GDB_CMD_FILE != None:
diff --git a/src/testing/tests/test_01_nodeBooter.py b/src/testing/tests/test_01_nodeBooter.py
index 6affd66..98497e0 100644
--- a/src/testing/tests/test_01_nodeBooter.py
+++ b/src/testing/tests/test_01_nodeBooter.py
@@ -42,7 +42,7 @@ class NodeBooterTest(scatest.CorbaTestCase):
         except CosNaming.NamingContext.NotFound:
             pass # This exception is expected
 
-        nb = Popen("../../control/framework/nodeBooter -D --domainname %s -debug 9 --nopersist" % (domainName), cwd=scatest.getSdrPath(), shell=True)
+        nb = Popen(["../../control/framework/nodeBooter", "-D", "--domainname", domainName, "-debug", "9", "--nopersist"], cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5)
 
         # Test that the name exists and is a DomainManager
@@ -73,7 +73,7 @@ class NodeBooterTest(scatest.CorbaTestCase):
         except CosNaming.NamingContext.NotFound:
             pass # This exception is expected
         
-        nb = Popen("../../control/framework/nodeBooter -D -debug 9 --nopersist", cwd=scatest.getSdrPath(), shell=True)
+        nb = Popen(["../../control/framework/nodeBooter", "-D", "-debug", "9", "--nopersist"], cwd=scatest.getSdrPath(), shell=False)
         
         time.sleep(5)
         # Test that the name exists and is a DomainManager
@@ -100,7 +100,7 @@ class NodeBooterTest(scatest.CorbaTestCase):
         a device manager would prevent you from restarting the devicemanager without
         first restarting the domainmanager.  Test that this condition is fixed"""
         #  It is important that these core pieces somewhat work for all the other tests to succeed
-        nb1= Popen("../../control/framework/nodeBooter -D -debug 9 --nopersist", cwd=scatest.getSdrPath(), shell=True)
+        nb1 = Popen(["../../control/framework/nodeBooter", "-D", "-debug", "9", "--nopersist"], cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
 
         domainName = scatest.getTestDomainName()
@@ -108,8 +108,8 @@ class NodeBooterTest(scatest.CorbaTestCase):
         self.assertNotEqual(domMgr, None)
         self.assertEqual(len(domMgr._get_deviceManagers()), 0)
 
-        nb2 = Popen("../../control/framework/nodeBooter -d /nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml -debug 9 --domainname %s" % domainName, 
-            cwd=scatest.getSdrPath(), shell=True)
+        nb2 = Popen(["../../control/framework/nodeBooter", "-d", "/nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml", "-debug", "9", "--domainname", domainName], 
+            cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
         self.assertEqual(len(domMgr._get_deviceManagers()), 1)
 
@@ -120,8 +120,8 @@ class NodeBooterTest(scatest.CorbaTestCase):
 
         # Restart the device manager to prove that the shutdown was graceful.
         # In OSSIE 0.7.4 this would fail.
-        nb3 = Popen("../../control/framework/nodeBooter -d /nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml -debug 9 --domainname %s" % domainName, 
-            cwd=scatest.getSdrPath(), shell=True)
+        nb3 = Popen(["../../control/framework/nodeBooter", "-d", "/nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml", "-debug", "9", "--domainname", domainName], 
+            cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
         self.assertEqual(len(domMgr._get_deviceManagers()), 1)
 
@@ -148,7 +148,7 @@ class NodeBooterTest(scatest.CorbaTestCase):
         a device manager would prevent you from restarting the devicemanager without
         first restarting the domainmanager.  Test that this condition is fixed"""
         #  It is important that these core pieces somewhat work for all the other tests to succeed
-        nb1= Popen("../../control/framework/nodeBooter -D -debug 9 --nopersist", cwd=scatest.getSdrPath(), shell=True)
+        nb1= Popen(["../../control/framework/nodeBooter", "-D", "-debug", "9", "--nopersist"], cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
 
         domainName = scatest.getTestDomainName()
@@ -156,8 +156,8 @@ class NodeBooterTest(scatest.CorbaTestCase):
         self.assertNotEqual(domMgr, None)
         self.assertEqual(len(domMgr._get_deviceManagers()), 0)
 
-        nb2 = Popen("../../control/framework/nodeBooter -d /nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml -debug 9 --domainname %s" % domainName, 
-            cwd=scatest.getSdrPath(), shell=True)
+        nb2 = Popen(["../../control/framework/nodeBooter", "-d", "/nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml", "-debug", "9", "--domainname", domainName], 
+            cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
         self.assertEqual(len(domMgr._get_deviceManagers()), 1)
 
@@ -168,8 +168,8 @@ class NodeBooterTest(scatest.CorbaTestCase):
 
         # Restart the device manager to prove that the shutdown was graceful.
         # In OSSIE 0.7.4 this would fail.
-        nb3 = Popen("../../control/framework/nodeBooter -d /nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml -debug 9 --domainname %s" % domainName, 
-            cwd=scatest.getSdrPath(), shell=True)
+        nb3 = Popen(["../../control/framework/nodeBooter", "-d", "/nodes/test_ExecutableDevice_node/DeviceManager.dcd.xml", "-debug", "9", "--domainname", domainName], 
+            cwd=scatest.getSdrPath(), shell=False)
         time.sleep(5) # Give it time to start
         self.assertEqual(len(domMgr._get_deviceManagers()), 1)
 
-- 
